color = colors[1]) +
labs(title = title,
x = x,
y = "Frequency") +
annotate("text",
x = mean(data)*1.25,
y = max(binCounts, na.rm = TRUE)*0.75,
label = paste0("x\u0305 = ", xbar),
size = 3) +
theme_bw()
p <- ggplot(data.frame(data), aes(sample = data)) +
stat_qq_band(color = colors[1], fill = colors[2]) +
stat_qq_line(color = colors[3], linetype = "dashed", size = 0.7) +
stat_qq_point(size = 0.8, alpha = 0.3) +
labs(title = "IQ Q-Q Plot",
x = "Theoretical Values",
y = "Sample Values") +
theme_bw()
grid.arrange(g, p, ncol = 2)
}
distribution_visualizer(mtcars$mpg)
waterSamples <- c(-5, -2, -1, -1, 0, 0, 2, 3, 4, 4, 5, 5, 6, 6, 11)
n <- length(waterSamples)
xbar <- mean(waterSamples)
s <- sd(waterSamples)
se <- m/(s/sqrt(n))
se <- s/sqrt(n)
z <- xbar/se
ci <- c(xbar - qnorm(0.975)*se, xbar + qnorm(0.975)*se)
critical_value <- round(qt(0.975, df = n-1),2)
p_val <- 2*(1-pnorm(critical_value))
n
xbar
s
se
z
ci
critical_value
p_val
waterSamples <- c(-5,-2,-1,-1,0,0,2,3,4,4,5,5,6,6,11)
n <- length(waterSamples)
xbar <- mean(waterSamples)
s <- sd(waterSamples)
se <- s/sqrt(n)
t <- xbar/se
ci <- c(xbar - qnorm(0.975)*se, xbar + qnorm(0.975)*se)
critical_value <- round(qt(0.975, df = n-1),2)
p_val <- 2*(1-pnorm(critical_value))
critical_value
?pt
p_val <- 2*(1-pt(critical_value))
distribution_visualizer(waterSamples)
waterSamples <- c(-5,-2,-1,-1,0,0,2,3,4,4,5,5,6,6,11)
n <- length(waterSamples)
xbar <- mean(waterSamples)
s <- sd(waterSamples)
se <- s/sqrt(n)
t <- xbar/se
# ci <- c(xbar - qnorm(0.975)*se, xbar + qnorm(0.975)*se) #used with known population variance
critical_value <- round(qt(0.975, df = n-1),2)
ci_lower <- round(xbar-critical_value*se,2)
ci_upper <- round(xbar+critical_value*se,2)
# p_val <- 2*(1-pnorm(t)) # not asked in this question
distribution_visualizer(waterSamples)
t
critical_value
s
sqrt(15)
var(waterSamples)
set.seed(123456)
n=20
reps=200
z=rep(NA,reps)
for(i in 1:reps){
x=sample(c(-2,5),size=n,replace=T)
z[i]=mean(waterSamples)/(sd(waterSamples)/sqrt(n))
}
summary(z)
qnorm(0.975)
critical_value = qnorm(0.975)
mean(abs(z)>critical_value)
set.seed(123456)
n=20
reps=200
z=rep(NA,reps)
for(i in 1:reps){
x=sample(c(-2,5),size=n,replace=T)
z[i]=mean(waterSamples)/(sd(waterSamples)/sqrt(n))
}
summary(z)
critical_value = qnorm(0.975)
mean(abs(z)>critical_value)
z
set.seed(123456)
n=20
reps=200
z=rep(NA,reps)
for(i in 1:reps){
x=rnorm(n,mean=0,sd=5)
z[i]=mean(x)/(sd(x)/sqrt(n))
}
summary(z)
critical.value = 1.96
mean(abs(z)>critical.value)
set.seed(123456)
n=20
reps=200
z=rep(NA,reps)
for(i in 1:reps){
x=sample(c(-2,5),size=n,replace=T)
z[i]=mean(x)/(sd(x)/sqrt(n))
}
summary(z)
critical_value = qnorm(0.975)
mean(abs(z)>critical_value)
set.seed(123456)
n=100
reps=200
z=rep(NA,reps)
for(i in 1:reps){
x=sample(c(-2,5),size=n,replace=T)
z[i]=mean(x)/(sd(x)/sqrt(n))
}
summary(z)
critical_value = qnorm(0.975)
mean(abs(z)>critical_value)
z
x
set.seed(123456)
n=1000
reps=200
z=rep(NA,reps)
for(i in 1:reps){
x=sample(c(-2,5),size=n,replace=T)
z[i]=mean(x)/(sd(x)/sqrt(n))
}
summary(z)
critical_value = qnorm(0.975)
mean(abs(z)>critical_value)
set.seed(123456)
n=100
reps=200
z=rep(NA,reps)
for(i in 1:reps){
x=sample(c(-2,5),size=n,replace=T)
z[i]=mean(x)/(sd(x)/sqrt(n))
}
summary(z)
critical_value = qnorm(0.975)
mean(abs(z)>critical_value)
n=100
reps=200
z=rep(NA,reps)
for(i in 1:reps){
x=round(runif(n,-10,10),0)
z[i]=mean(x)/(sd(x)/sqrt(n))
}
summary(z)
mean(abs(z)>critical_value)
set.seed(123456)
n=100
reps=200
z=rep(NA,reps)
for(i in 1:reps){
x=sample(c(-4,4),size=n,replace=T)
z[i]=mean(x)/(sd(x)/sqrt(n))
}
summary(z)
critical_value = qnorm(0.975)
mean(abs(z)>critical_value)
hist(z)
set.seed(123456)
n=100
reps=200
z=rep(NA,reps)
for(i in 1:reps){
x=runif(n,-3,7)
z[i]=mean(x)/(sd(x)/sqrt(n))
}
summary(z)
critical_value = qnorm(0.975)
mean(abs(z)>critical_value)
set.seed(123456)
n=100
reps=200
z=rep(NA,reps)
for(i in 1:reps){
x=runif(n,-3,7)
z[i]=(mean(x)-(7+3)/2)/(sd(x)/sqrt(n))
}
summary(z)
critical_value = qnorm(0.975)
mean(abs(z)>critical_value)
set.seed(123456)
n=100
reps=200
z=rep(NA,reps)
for(i in 1:reps){
x=runif(n,-3,7)
z[i]=(mean(x)-mean(c(7,3)))/(sd(x)/sqrt(n))
}
summary(z)
critical_value = qnorm(0.975)
mean(abs(z)>critical_value)
set.seed(123456)
n=100
reps=200
z=rep(NA,reps)
for(i in 1:reps){
x=runif(n,-3,7)
z[i]=(mean(x)+mean(c(7,3)))/(sd(x)/sqrt(n))
}
summary(z)
critical_value = qnorm(0.975)
mean(abs(z)>critical_value)
set.seed(123456)
n=100
reps=200
z=rep(NA,reps)
for(i in 1:reps){
x=runif(n,-3,7)
z[i]=(mean(x))/(sd(x)/sqrt(n))
}
summary(z)
critical_value = qnorm(0.975)
mean(abs(z)>critical_value)
set.seed(123456)
n=100
reps=200
z=rep(NA,reps)
for(i in 1:reps){
x=runif(n,-3,7)
z[i]=(mean(x)-2)/(sd(x)/sqrt(n))
}
summary(z)
critical_value = qnorm(0.975)
mean(abs(z)>critical_value)
xbar
set.seed(123456)
n=100
reps=200
z=rep(NA,reps)
for(i in 1:reps){
x=runif(n,-3,7)
z[i]=(mean(x)-2)/(sd(x)/sqrt(n)) # shifting down 2 since we're assuming the mean is closer to 2, like the sample data
}
summary(z)
critical_value = qnorm(0.975)
mean(abs(z)>critical_value)
p_val <- 2*(1-pnorm(mean(abs(z)>critical_value)))
set.seed(123456)
n=100
reps=200
z=rep(NA,reps)
for(i in 1:reps){
x=runif(n,-3,7)
z[i]=(mean(x)-2)/(sd(x)/sqrt(n)) # shifting down 2 since we're assuming the mean is closer to 2, like the sample data
}
summary(z)
critical_value = qnorm(0.975)
mean(abs(z)>critical_value)
p_val <- 2*(1-pnorm(mean(abs(z)>critical_value)))
p_val
a <- 1-p_val
a
set.seed(123456)
n=100
reps=200
z=rep(NA,reps)
for(i in 1:reps){
x=runif(n,-3,7)
# shifting down 2 since we're assuming the mean is closer to 2, like the sample data
z[i]=(mean(x)-2)/(sd(x)/sqrt(n))
}
summary(z)
critical_value = qnorm(0.975)
a <- mean(abs(z)>critical_value)
a
set.seed(123456)
n=100
reps=200
z=rep(NA,reps)
for(i in 1:reps){
x=runif(n,-3,7)
# shifting down 2 since we're assuming the mean is closer to 2, like the sample data
z[i]=(mean(x)-2)/(sd(x)/sqrt(n))
}
summary(z)
se <- sd(z)/sqrt(n)
critical_value = qt(0.975, df = n-1)*se
a <- mean(abs(z)>critical_value)
a
set.seed(123456)
n=100
reps=200
z=rep(NA,reps)
for(i in 1:reps){
x=runif(n,-3,7)
# shifting down 2 since we're assuming the mean is closer to 2, like the sample data
z[i]=(mean(x)-2)/(sd(x)/sqrt(n))
}
summary(z)
se <- sd(z)/sqrt(n)
critical_value = qt(0.975, df = n-1)*se
a <- mean(abs(z)>critical_value)
a
set.seed(4472)
set.seed(4472)
n=100
reps=200
z=rep(NA,reps)
for(i in 1:reps){
x=runif(n,-3,7)
# shifting down 2 since we're assuming the mean is closer to 2, like the sample data
z[i]=(mean(x)-2)/(sd(x)/sqrt(n))
}
summary(z)
se <- sd(z)/sqrt(n)
critical_value = qt(0.975, df = n-1)*se
a <- mean(abs(z)>critical_value)
a
set.seed(4472)
n=100
reps=200
z=rep(NA,reps)
for(i in 1:reps){
x=runif(n,-3,7)
# shifting down 2 since we're assuming the mean is closer to 2, like the sample data
z[i]=(mean(x)-2)/(sd(x)/sqrt(n))
}
summary(z)
critical_value = qnorm(0.975)
a <- mean(abs(z)>critical_value)
a
set.seed(4432)
n=100
reps=200
z=rep(NA,reps)
for(i in 1:reps){
x=runif(n,-3,7)
# shifting down 2 since we're assuming the mean is closer to 2, like the sample data
z[i]=(mean(x)-2)/(sd(x)/sqrt(n))
}
summary(z)
critical_value = qnorm(0.975)
a <- mean(abs(z)>critical_value)
a
set.seed(4412)
n=100
reps=200
z=rep(NA,reps)
for(i in 1:reps){
x=runif(n,-3,7)
# shifting down 2 since we're assuming the mean is closer to 2, like the sample data
z[i]=(mean(x)-2)/(sd(x)/sqrt(n))
}
summary(z)
critical_value = qnorm(0.975)
a <- mean(abs(z)>critical_value)
a
set.seed(4422)
n=100
reps=200
z=rep(NA,reps)
for(i in 1:reps){
x=runif(n,-3,7)
# shifting down 2 since we're assuming the mean is closer to 2, like the sample data
z[i]=(mean(x)-2)/(sd(x)/sqrt(n))
}
summary(z)
critical_value = qnorm(0.975)
a <- mean(abs(z)>critical_value)
a
set.seed(4432)
n=100
reps=200
z=rep(NA,reps)
for(i in 1:reps){
x=runif(n,-3,7)
# shifting down 2 since we're assuming the mean is closer to 2, like the sample data
z[i]=(mean(x)-2)/(sd(x)/sqrt(n))
}
summary(z)
critical_value = qnorm(0.975)
a <- mean(abs(z)>critical_value)
a
set.seed(4442)
n=100
reps=200
z=rep(NA,reps)
for(i in 1:reps){
x=runif(n,-3,7)
# shifting down 2 since we're assuming the mean is closer to 2, like the sample data
z[i]=(mean(x)-2)/(sd(x)/sqrt(n))
}
summary(z)
critical_value = qnorm(0.975)
a <- mean(abs(z)>critical_value)
a
set.seed(4452)
n=100
reps=200
z=rep(NA,reps)
for(i in 1:reps){
x=runif(n,-3,7)
# shifting down 2 since we're assuming the mean is closer to 2, like the sample data
z[i]=(mean(x)-2)/(sd(x)/sqrt(n))
}
summary(z)
critical_value = qnorm(0.975)
a <- mean(abs(z)>critical_value)
a
set.seed(4432)
n=100
reps=200
z=rep(NA,reps)
for(i in 1:reps){
x=runif(n,-3,7)
# shifting down 2 since we're assuming the mean is closer to 2, like the sample data
z[i]=(mean(x)-2)/(sd(x)/sqrt(n))
}
summary(z)
critical_value = qnorm(0.975)
a <- mean(abs(z)>critical_value)
a
N<-1e3 #number of samples
set.seed(3256)
n<-length(data)
sim_result<-replicate(N,{
sim_data<-rnorm(n,0,sd=sqrt(15))
Z<-mean(sim_data)/sqrt(15/n)
abs(Z)>qnorm(0.975)
})
mean(sim_result)
## [1] 0.049
#Another example with non-normal distribution
sim_result<-replicate(N,{
sim_data<-rpois(n,15)-15 #mean 0, variance 15
Z<-mean(sim_data)/sqrt(15/n)
abs(Z)>qnorm(0.975)
})
mean(sim_result)
?rlnorm
?mvnorm
?mvrnorm
Sigma <- matrix(c(10,3,3,2),2,2)
Sigma
?rnorm
cov(x = rnorm(15,mean = mode1, sd = 15), y = rnorm(15,mean = mode2, sd = 15))
mode1 <- -2
mode2 <- 5
cov(x = rnorm(15,mean = mode1, sd = 15), y = rnorm(15,mean = mode2, sd = 15))
## cov2cor() scales a covariance matrix by its diagonal
##           to become the correlation matrix.
cov2cor # see the function definition {and learn ..}
stopifnot(all.equal(Cl, cov2cor(cov(longley))),
all.equal(cor(longley, method="kendall"),
cov2cor(cov(longley, method="kendall"))))
var(1:10)# 9.166667
var(1:5,1:5)# 2.5
## Two simple vectors
cor(1:10,2:11)# == 1
## Correlation Matrix of Multivariate sample:
(Cl <- cor(longley))
## Graphical Correlation Matrix:
symnum(Cl) # highly correlated
## Spearman's rho  and  Kendall's tau
symnum(clS <- cor(longley, method = "spearman"))
symnum(clK <- cor(longley, method = "kendall"))
## How much do they differ?
i <- lower.tri(Cl)
cor(cbind(P = Cl[i], S = clS[i], K = clK[i]))
## cov2cor() scales a covariance matrix by its diagonal
##           to become the correlation matrix.
cov2cor # see the function definition {and learn ..}
stopifnot(all.equal(Cl, cov2cor(cov(longley))),
all.equal(cor(longley, method="kendall"),
cov2cor(cov(longley, method="kendall"))))
n=100
reps=200
z=rep(NA,reps)
mode1 <- -2
mode2 <- 5
Sigma <- matrix(c(10,3,3,2),2,2)
for(i in 1:reps){
x=mvrnorm(n, mu = c(-3,7), Sigma = Sigma)
# shifting down 2 since we're assuming the mean is closer to 2, like the sample data
z[i]=(mean(x)-2)/(sd(x)/sqrt(n))
}
?mvrnorm
install.packages("mvrnorm")
n=100
reps=200
z=rep(NA,reps)
mode1 <- -2
mode2 <- 7
for(i in 1:reps){
x=rmvnorm(n, mean = c(mode1,mode2))
# shifting down 2 since we're assuming the mean is closer to 2, like the sample data
z[i]=(mean(x)-2)/(sd(x)/sqrt(n))
}
install.packages("Mvnorm")
install.packages("Mvnorm", dependencies=TRUE, repos='http://cran.rstudio.com/')
library(Mvnorm)
Z = rnorm(3)
A = rbind(c(1,1,0),c(1,0,1))
print(A %*% t(A)) # show Sigma
Z
A
X = A %*% Z
X
getwd()
