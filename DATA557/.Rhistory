g <- ggplot(resultsLong, aes(x = n, y = value, color = metric))
g + geom_line()
g + geom_line()
g
g_geom_line()
g+geom_line()
idealPower_n <- results$n[which(first(results$power>=0.9))]
ideal_power_n <- results$n[which(first(results$power>=0.9))]
ideal_p_val_n <- results$n[which(first(results$p_val<=0.05))]
g <- ggplot(resultsLong, aes(x = n, y = value, color = metric))
g + geom_line() +
theme_bw() +
geom_hline(yintercept = 0.9, col = "blue", linetype = "dashed") +
geom_hline(yintercept = 0.05, col = "red", linetype = "dashed") +
geom_vline(xintercept = ideal_power_n, col = "#619CFF", linetype = 3) +
geom_vline(xintercept = ideal_p_val_n, col = "#F8766D", linetype = 3) +
labs(title = "Power and P-value by Sample Size",
x = "Sample Size",
y = "Power/P-val") +
scale_color_discrete(name = "Metric")
ideal_power_n
ideal_power_n <- results$n[which(first(results$power>=0.9))]
idea_poower_n
ideal_power_n
which(first(results$power>=0.9))
ideal_power_n <- results$n[first(which(results$power>=0.9))]
ideal_p_val_n <- results$n[first(which(results$p_val<=0.05))]
# convert to long format for plotting
resultsLong <- gather(results, metric, value, -n)
g <- ggplot(resultsLong, aes(x = n, y = value, color = metric))
g + geom_line() +
theme_bw() +
geom_hline(yintercept = 0.9, col = "blue", linetype = "dashed") +
geom_hline(yintercept = 0.05, col = "red", linetype = "dashed") +
geom_vline(xintercept = ideal_power_n, col = "#619CFF", linetype = 3) +
geom_vline(xintercept = ideal_p_val_n, col = "#F8766D", linetype = 3) +
labs(title = "Power and P-value by Sample Size",
x = "Sample Size",
y = "Power/P-val") +
scale_color_discrete(name = "Metric")
ideal_p_val_n
which(results$p_val<=0.05)
ideal_power_n <- results$n[first(which(results$power>=0.9))]
ideal_p_val_n <- results$n[first(which(results$avg_p_val<=0.05))]
# convert to long format for plotting
resultsLong <- gather(results, metric, value, -n)
g <- ggplot(resultsLong, aes(x = n, y = value, color = metric))
g + geom_line() +
theme_bw() +
geom_hline(yintercept = 0.9, col = "blue", linetype = "dashed") +
geom_hline(yintercept = 0.05, col = "red", linetype = "dashed") +
geom_vline(xintercept = ideal_power_n, col = "#619CFF", linetype = 3) +
geom_vline(xintercept = ideal_p_val_n, col = "#F8766D", linetype = 3) +
labs(title = "Power and P-value by Sample Size",
x = "Sample Size",
y = "Power/P-val") +
scale_color_discrete(name = "Metric")
ideal_p_val_n
ideal_power_n
means <- rep(NA,reps)
for(j in 1:reps){
sampleData <- rexp(122,1/3)
means[j] <- mean(sampleData)
}
distribution_visualizer(means)
set.seed(20190213)
min_n <- 30
max_n <- 150
reps <- 1000
results <- data.frame(n = min_n:max_n,
avg_p_val = rep(NA, max_n-min_n+1),
power = rep(NA, max_n-min_n+1))
p_vals <- rep(NA,reps)
for(i in min_n:max_n){
for(j in 1:reps){
sampleData <- data.frame(battery_type = c(rep("batt_A",i), rep("batt_B",i), rep("batt_C",i)),
batt_life = c(rexp(i,1/2),
rexp(i,1/3),
rexp(i,1/4)))
p_vals[j] <- summary(aov(batt_life ~ battery_type, sampleData))[[1]][[5]][[1]]
}
results$avg_p_val[i-29] <- mean(p_vals)
results$power[i-29] <- mean(p_vals<0.05)
}
ideal_power_n <- results$n[first(which(results$power>=0.9))]
ideal_p_val_n <- results$n[first(which(results$avg_p_val<=0.05))]
# convert to long format for plotting
resultsLong <- gather(results, metric, value, -n)
g <- ggplot(resultsLong, aes(x = n, y = value, color = metric))
g + geom_line() +
theme_bw() +
geom_hline(yintercept = 0.9, col = "blue", linetype = "dashed") +
geom_hline(yintercept = 0.05, col = "red", linetype = "dashed") +
geom_vline(xintercept = ideal_power_n, col = "#619CFF", linetype = 3) +
geom_vline(xintercept = ideal_p_val_n, col = "#F8766D", linetype = 3) +
labs(title = "Power and P-value by Sample Size",
x = "Sample Size",
y = "Power/P-val") +
scale_color_discrete(name = "Metric")
ideal_p_val_n
ideal_power_n
means <- rep(NA,reps)
for(j in 1:reps){
sampleData <- rexp(ideal_power_n,1/3)
means[j] <- mean(sampleData)
}
distribution_visualizer(means)
getwd()
wineData <- read.csv("~/WEEK06/wine.csv")
wineData <- read.csv("/WEEK06/wine.csv")
wineData <- read.csv("WEEK06/wine.csv")
View(wineData)
fevData <- read.csv("WEEK06/fev.csv")
fevData <- read.csv("WEEK04/fev.csv")
fevData <- read.csv("WEEK05/fev.csv")
fevData <- read.csv("WEEK03/fev.csv")
summary(aov(quality~alc,wineData))
summary(aov(quality~ph,wineData))
fit <- lm(quality~alc,wineData, wineData)
fit <- lm(quality~alc,wineData)
plot(fit)
summary(aov(quality~factor(alc),wineData))
summary(aov(quality~factor(ph),wineData))
summary(fit)
fit <- lm(quality ~ ph, wineData)
summary(fit)
plot(fit)
summary(aov(quality ~ ., wineData))
g <- ggplot(wineData, aes(x = ph, y = quality))
g + geom_line()
?geom_point
g <- ggplot(wineData, aes(x = ph, y = quality))
g + geom_point() + geom_line(method = "lm")
g <- ggplot(wineData, aes(x = factor(ph), y = quality))
g + geom_point() + geom_line(method = "lm")
g <- ggplot(wineData, aes(x = factorph, y = quality))
g + geom_point() + geom_line(method = "lm")
g <- ggplot(wineData, aes(x = ph, y = quality))
g + geom_point() + geom_line(method = "lm")
g + geom_point() + geom_smooth(method = "lm")
g + geom_point() +
geom_smooth(method = "lm") +
theme_bw()
g <- ggplot(wineData, aes(x = alc, y = quality))
g + geom_point() +
geom_smooth(method = "lm") +
theme_bw()
summary(fit)
g + geom_point() +
geom_smooth(method = "lm") +
theme_bw()
g <- ggplot(wineData, aes(x = ph, y = quality))
g + geom_point() +
geom_smooth(method = "lm") +
theme_bw()
summary(fit)
g <- ggplot(wineData, aes(x = ph, y = quality))
g + geom_point() +
geom_smooth(method = "lm") +
theme_bw()
summary(aov(quality ~ alc+ph, wineData))
summary(lm(quality ~ alc + ph, wineData))$coef
summary(aov(quality ~ alc * ph, wineData))
summary(lm(quality ~ alc * ph, wineData))$coef
View(fevData)
summarylm(fev ~ age, fevData)$coef
summary(lm(fev ~ age, fevData))$coef
summary(lm(fev ~ smoke, fevData))$coef
fevData <- read.csv("WEEK03/fev.csv")
fevData <- read.csv("WEEK03/fev.csv")
getwd()
summary(lm(fev ~ age, fevData))$coef
summary(lm(fev ~ smoke, fevData))$coef
summary(lm(fev ~ age, fevData))$coef
summary(lm(fev ~ smoke, fevData))$coef
summary(lm(fev ~ age*smoke, fevData))$coef
summary(lm(fev ~ age*smoke, fevData))$coef
summary(lm(fev ~ age, fevData))$coef
summary(lm(fev ~ smoke, fevData))$coef
summary(aov(quality ~ factor(alc) + factor(ph), wineData))
str(summary(lm(quality ~ alc + ph, wineData)))
summary(aov(quality ~ factor(alc) * factor(ph), wineData))
12/14
getwd()
fevData <- read.csv("fevData.csv")
fevData <- read.csv("~/UW/DATA557/WEED07/fevData.csv")
fevData <- read.csv("~/UW/DATA557/WEEK07/fevData.csv")
fevData <- read.csv("~/UW/DATA557/WEEK07/fev.csv")
summary(lm(fev ~ age, fevData))$coef
summary(lm(fev ~ ht, fevData))$coef
summary(lm(fev ~ age*ht, fevData))$coef
summary(lm(fev ~ age + ht, fevData))$coef
Y=fevData$fev
n=nrow(fevData)
X=cbind(rep(1,n),fevData$age,fevData$ht) # X'X inverse
solve(t(X) %*% X)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
fevData <- read.csv("~/UW/DATA557/WEEK07/fev.csv")
pilotData <- read.csv("pilot.csv")
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
fevData <- read.csv("~/UW/DATA557/WEEK07/fev.csv")
summary(lm(fev ~ (.)^2, fevData))$coef
View(pilotData)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
fevData <- read.csv("~/UW/DATA557/WEEK07/fev.csv")
var(pilotData$y[which(pilotData$x==20)])/sqrt(4)
var(pilotData$y[which(pilotData$x==10)])/sqrt(4)
var(pilotData$y[which(pilotData$x==20)])/sqrt(4)
var(pilotData$y[which(pilotData$x==30)])/sqrt(4)
var(pilotData$y[which(pilotData$x==40)])/sqrt(4)
var(pilotData$y[which(pilotData$x==10)])/sqrt(4)
var(pilotData$y[which(pilotData$x==20)])/sqrt(4)
var(pilotData$y[which(pilotData$x==30)])/sqrt(4)
var(pilotData$y[which(pilotData$x==40)])/sqrt(4)
sd(pilotData$y[which(pilotData$x==10)])/sqrt(4)
sd(pilotData$y[which(pilotData$x==20)])/sqrt(4)
sd(pilotData$y[which(pilotData$x==30)])/sqrt(4)
sd(pilotData$y[which(pilotData$x==40)])/sqrt(4)
View(X)
View(X)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
fevData <- read.csv("~/UW/DATA557/WEEK07/fev.csv")
fit1 <- lm(fev ~ (.)^2, fevData)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
fevData <- read.csv("~/UW/DATA557/WEEK07/fev.csv")
par(mfrow = c(2,2), mar = c(5,4,2,1))
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
fevData <- read.csv("~/UW/DATA557/WEEK07/fev.csv")
plot(fit1)
summary(lm(fev ~ (.)^2, fevData))$coef
fit1 <- lm(fev ~ (.)^2, fevData)
par(mfrow = c(2,2), mar = c(5,4,2,1))
plot(fit1)
getwd()
knitr::opts_chunk$set(echo = TRUE)
cellData <- read.csv("~/UW/WEEK06/cells.csv")
cellData <- read.csv("~/UW/DATA557/WEEK06/cells.csv")
View(cellData)
summary(lm(count1 ~ dose, cellData))$coef
library(kableExtra)
kable(summary(lm(count1 ~ dose + dose*sex + dose*age + dose*count1, cellData))$coef)
kable(summary(lm(count1 ~ dose + dose*sex + dose*age + dose*count0, cellData))$coef)
kable(summary(lm(count1 ~ dose + sex + age + count0, cellData))$coef)
options(scipen = 6, digits = 4)
kable(summary(lm(count1 ~ dose + sex + age + count0, cellData))$coef)
options(scipen = 6, digits = 3)
kable(summary(lm(count1 ~ dose + sex + age + count0, cellData))$coef)
fit1 <- lm(count1 ~ dose + sex + age + count0, cellData)
par(mfrow = c(2,2), mar = c(5,4,2,1))
plot(fit1)
fit1 <- lm(count1 ~ dose + sex + age + count0, cellData)
par(mfrow = c(1,2), which = c(1,3))
fit1 <- lm(count1 ~ dose + sex + age + count0, cellData)
par(mfrow = c(1,2))
plot(fit1, which = c(1,3))
library(kableExtra)
library(ggplot2)
library(tidyr)
library(dplyr)
library(scales)
library(ggthemes)
library(qqplotr)
library(gridExtra)
colors <- ggthemes_data[["tableau"]][["color-palettes"]][["regular"]][[2]][[2]]
distribution_visualizer <- function(
data,
title = "Histogram and Density",
x = "Values",
binwidthInput = (max(data)-min(data))/15){
binwidthInput <- binwidthInput
binCounts <- .bincode(data, seq(0,max(data), binwidthInput))
xbar <- round(mean(data),1)
sd <- round(sd(data),1)
g <- ggplot(data.frame(data), aes(data)) +
geom_histogram(fill = colors[1],
color = colors[2],
binwidth = binwidthInput) +
geom_vline(aes(xintercept = mean(data)),
color = colors[3],
linetype = "dashed",
size = 0.7) +
geom_density(aes(y = binwidthInput * ..count..),
alpha = 0.2,
fill = colors[2],
color = colors[1]) +
labs(title = title,
x = x,
y = "Frequency") +
annotate("text",
x = mean(data)*1.25,
y = max(binCounts, na.rm = TRUE)*0.75,
label = paste0("Mean = ", xbar), # "x\u0305 = " for Windows
size = 3) +
theme_bw()
p <- ggplot(data.frame(data), aes(sample = data)) +
stat_qq_band(color = colors[1], fill = colors[2]) +
stat_qq_line(color = colors[3], linetype = "dashed", size = 0.7) +
stat_qq_point(size = 0.8, alpha = 0.3) +
labs(title = "Q-Q Plot",
x = "Theoretical Values",
y = "Sample Values") +
theme_bw()
grid.arrange(g, p, ncol = 2)
}
distribution_visualizer(cellData$count1-mean(cellData$count1))
distribution_visualizer(cellData$count1)
distribution_visualizer(cellData$count1-mean(cellData$count1))
nrow(cellData)
salesData <- read.csv("~/UW/DATA557/WEEK06/Sales.csv")
View(salesData)
fit2 <- lm(LAST_SALE_PRICE ~ SQFT + LOT_SIZE + BEDS + BATHS, salesData)
kable(summary(fit2)$coef)
fit2 <- lm(LAST_SALE_PRICE ~ SQFT * LOT_SIZE * BEDS * BATHS, salesData)
kable(summary(fit2)$coef)
fit2 <- lm(LAST_SALE_PRICE ~ SQFT + LOT_SIZE + BEDS + BATHS, salesData)
kable(summary(fit2)$coef)
nrow(salesData)
nrow(salesData)/3
salesData <- sort(salesData, SQFT)
salesData <- arrange(salesData, SQFT)
smallSales <- salesData[1:(nrow(salesData))/3,]
largeSales <- salesData[(2*nrow(salesData))/3:,]
largeSales <- salesData[(2*nrow(salesData))/3:nrow(salesData),]
nrow(smallSales)
nrow(largeSales)
smallSales <- salesData[1:(nrow(salesData)/3),]
largeSales <- salesData[(2*nrow(salesData)/3):nrow(salesData),]
nrow(smallSales)
nrow(largeSales)
smallFit <- lm(LAST_SALE_PRICE ~ SQFT + LOT_SIZE + BEDS + BATHS, smallSales)
kable(summary(smallFit)$coef)
max(smallSales$SQFT)
largeFit <- lm(LAST_SALE_PRICE ~ SQFT + LOT_SIZE + BEDS + BATHS, largeSales)
kable(summary(largeFit)$coef)
min(largeSales$SQFT)
max(largeSales$SQFT)
nrow(largeSales)
View(largeSales)
salesData <- arrange(salesData, SQFT) %>%
filter(is.na(SQFT)==FALSE)
nrow(largeSales)
smallSales <- salesData[1:(nrow(salesData)/3),]
nrow(smallSales)
largeSales <- salesData[(2*nrow(salesData)/3-1):nrow(salesData),]
nrow(largeSales)
largeSales <- salesData[(2*nrow(salesData)/3+1):nrow(salesData),]
smallFit <- lm(LAST_SALE_PRICE ~ SQFT + LOT_SIZE + BEDS + BATHS, smallSales)
kable(summary(smallFit)$coef)
largeFit <- lm(LAST_SALE_PRICE ~ SQFT + LOT_SIZE + BEDS + BATHS, largeSales)
kable(summary(largeFit)$coef)
max(smallSales$SQFT)
max(largeSales$SQFT)
min(largeSales$SQFT)
salesData <- arrange(salesData, SQFT) %>%
filter(!is.na(SQFT))
salesData <- arrange(salesData, SQFT) %>%
filter(!is.na(SQFT))
smallSales <- salesData[1:(nrow(salesData)/3),]
largeSales <- salesData[(2*nrow(salesData)/3+1):nrow(salesData),]
smallFit <- lm(LAST_SALE_PRICE ~ SQFT + LOT_SIZE + BEDS + BATHS, smallSales)
kable(summary(smallFit)$coef)
knitr::opts_chunk$set(echo = TRUE)
fevData <- read.csv("~/UW/DATA557/WEEK03/fev.csv")
install.packages('sandwhich')
library(sandwhich)
install.packages("sandwhich", repos = "https://CRAN.R-project.org/package=sandwich ", type="source")
install.packages("sandwhich", repos = "https://CRAN.R-project.org/package=sandwich", type="source")
install.packages("sandwhich", repos = "https://cran.r-project.org/src/contrib/sandwich_2.5-0.tar.gz", type="source")
install.packages("sandwich")
library(sandwhich)
library(sandwich)
?vcovHC
names(fevData)
summary(lm(smoke ~ age*male))*coef
summary(lm(smoke ~ age*male, fevData))*coef
fevData <- read.csv("~/UW/DATA557/WEEK03/fev.csv")
library(sandwich)
summary(lm(smoke ~ age*male, fevData))*coef
summary(lm(smoke ~ age * male, fevData))*coef
fit <- (lm(smoke ~ age * male, fevData))
fit <- (lm(smoke ~ age * male, fevData))
fit
summary(fit)
summary(fit)$coef
summary(fit)$coef
vcovHC(fit)
kable(summary(fit)$coef)
kable(vcovHC(fit))
kable(summary(fit)$coef)
par(mfrow = c(1,2))
plot(fit, which = c(1,3))
kable(summary(fit)$coef)
kable(vcovHC(fit))
plot(fit, which = c(1,3))
kable(vcovHC(fit))
kable(summary(fit)$coef)
fit=glm(smoke ~ age * male, fevData, family=binomial)
plot(fit)
getwd()
kable(summary(fit)$coef)
library(sandwich)
library(kableExtra)
fit <- (lm(smoke ~ age * male, fevData))
kable(summary(fit)$coef)
vcovHC(fit)
plot(fit, which = c(1,3))
fit=glm(smoke ~ age * male, fevData, family=binomial)
plot(fit)
kable(summary(fit)$coef)
summary(fit)$coef
vcovHC(fit)
teethData <- read.csv("~UW/DATA557/WEEK08/Teeth.csv")
teethData <- read.csv("~/UW/DATA557/WEEK08/Teeth.csv")
names(teethData)
fit=glm(PDALL ~ EXTR + GENDER + AGE, teethData, family=poisson)
str(teethData)
fit=glm(PDALL ~ EXTR * GENDER * AGE, teethData, family=poisson)
fit=glm(EXTR ~ PDALL * GENDER * AGE, teethData, family=poisson)
plot(fit)
?fitted
fit=glm(PDALL ~ EXTR + GENDER + AGE, teethData, family=poisson)
fit=glm(PDALL ~ EXTR * GENDER * AGE, teethData, family=poisson)
plot(fit)
fit=glm(EXTR ~ PDALL * GENDER * AGE, teethData, family=poisson)
plot(fit)
library(ggplot2)
library(tidyr)
library(dplyr)
library(scales)
library(ggthemes)
library(qqplotr)
library(gridExtra)
library(lubridate)
library(kableExtra)
# READ DATA
setwd("~/UW/DATA557/TEAM-PROJECT/")
crimeData_raw <- read.csv("Crime_Data.csv")
crimeData <- crimeData_raw
crimeData$Occurred.Date <- as_date(as.character(crimeData$Occurred.Date), format = "%m/%d/%Y", tz = "UTC")
crimeData$Reported.Date <- as_date(as.character(crimeData$Reported.Date), format = "%m/%d/%Y", tz = "UTC")
crimeData <- crimeData %>%
mutate(reportedYear = year(crimeData$Reported.Date),
occurredYear = year(crimeData$Occurred.Date),
reportedMonth = month(crimeData$Reported.Date),
occurredMonth = month(crimeData$Occurred.Date))
colors <- ggthemes_data[["tableau"]][["color-palettes"]][["regular"]][[2]][[2]]
distribution_visualizer <- function(
data,
title = "Histogram and Density",
x = "Values",
binwidthInput = (max(data)-min(data))/15){
binwidthInput <- binwidthInput
binCounts <- .bincode(data, seq(0,max(data), binwidthInput))
xbar <- round(mean(data),1)
sd <- round(sd(data),1)
g <- ggplot(data.frame(data), aes(data)) +
geom_histogram(fill = colors[1],
color = colors[2],
binwidth = binwidthInput) +
geom_vline(aes(xintercept = mean(data)),
color = colors[3],
linetype = "dashed",
size = 0.7) +
geom_density(aes(y = binwidthInput * ..count..),
alpha = 0.2,
fill = colors[2],
color = colors[1]) +
labs(title = title,
x = x,
y = "Frequency") +
annotate("text",
x = mean(data)*1.25,
y = max(binCounts, na.rm = TRUE)*0.75,
label = paste0("Mean = ", xbar), # "x\u0305 = " for Windows
size = 3) +
theme_bw()
p <- ggplot(data.frame(data), aes(sample = data)) +
stat_qq_band(color = colors[1], fill = colors[2]) +
stat_qq_line(color = colors[3], linetype = "dashed", size = 0.7) +
stat_qq_point(size = 0.8, alpha = 0.3) +
labs(title = "Q-Q Plot",
x = "Theoretical Values",
y = "Sample Values") +
theme_bw()
grid.arrange(g, p, ncol = 2)
}
# search for NAs
naSummer <- function(column_input) sum(is.na(column_input))
apply(crimeData, 2, naSummer)
# show data with NAs
kable(rbind(
crimeData[which(is.na(crimeData$Reported.Date)),],
crimeData[which(is.na(crimeData$Occurred.Date)),])
)
str(crimeData)
# set rows with NA values aside and remove
crimeData_nas <- crimeData[which(is.na(crimeData$Reported.Time)),]
str(crimeData_nas)
crimeData <- na.omit(crimeData)
nrow(crimeData)
View(crimeData)
table(crimeData$occurredYear)
# only the decade of 2009 through 2018
incomeData <- read.csv("~/UW/DATA557/TEAM-PROJECT/seattle_medianIncome.csv")
View(incomeData)
View(table(crimeData$Neighborhood))
